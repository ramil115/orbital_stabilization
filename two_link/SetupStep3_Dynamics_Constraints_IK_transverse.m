close all; clear; %clear classes;
clc; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dynamics

LinkArray = SRD_get('LinkArray');

SymbolicEngine = SRDSymbolicEngine('LinkArray', LinkArray, 'Casadi', false);
SymbolicEngine.InitializeLinkArray();

SRD_dynamics_derive_JacobiansForLinkArray('SymbolicEngine', SymbolicEngine);

H = SRD_dynamics_derive_JSIM('SymbolicEngine', SymbolicEngine);

[in, dH] = SRD_dynamics_derive_GeneralizedInertialForces_via_dH(...
    'SymbolicEngine', SymbolicEngine, ...
    'JointSpaceInertiaMatrix', H);

C = SRD_dynamics_derive_Cmatrix_via_Christoffel(...
    'SymbolicEngine', SymbolicEngine, ...
    'JointSpaceInertiaMatrix', H);

g = SRD_dynamics_derive_GeneralizedGravitationalForces(...
    'SymbolicEngine', SymbolicEngine, ...
    'GravitationalConstant', [0; 0; -9.8]);

d = SRD_dynamics_derive_GeneralizedDissipativeForces_uniform(...
    'SymbolicEngine', SymbolicEngine, ...
    'UniformCoefficient', 1);

T = sym([1;0]);

description = SRD_generate_dynamics_generalized_coordinates_model(...
    'SymbolicEngine', SymbolicEngine, ...
    'H', H, ...
    'c', (in + g + d), ...
    'T', T, ...
    'Symbolic_ToOptimizeFunctions', true, ...
    'Casadi_cfile_name', 'g_dynamics_generalized_coordinates', ...
    'FunctionName_H', 'g_dynamics_H', ...
    'FunctionName_c', 'g_dynamics_c', ...
    'FunctionName_T', 'g_dynamics_T', ...
    'Path', 'Dynamics/');

Handler_dynamics_generalized_coordinates_model = SRD_get_handler__dynamics_generalized_coordinates_model('description', description);
SRD_save(Handler_dynamics_generalized_coordinates_model, 'Handler_dynamics_generalized_coordinates_model');


description = SRD_generate_dynamics_HCg_model(...
    'SymbolicEngine', SymbolicEngine, ...
    'H', H, ...
    'C', C, ...
    'g', g, ...
    'T', T, ...
    'Symbolic_ToOptimizeFunctions', true, ...
    'Casadi_cfile_name', 'g_dynamics_generalized_coordinates', ...
    'FunctionName_H', 'g_dynamics_H', ...
    'FunctionName_C', 'g_dynamics_C', ...
    'FunctionName_g', 'g_dynamics_g', ...
    'FunctionName_T', 'g_dynamics_T', ...
    'Path', 'Transverse/');

Handler_dynamics_HCg_model = SRD_get_handler__dynamics_HCg_model('description', description);
SRD_save(Handler_dynamics_HCg_model, 'Handler_dynamics_HCg_model');
Handler_dynamics_HCg_model = SRD_get('Handler_dynamics_HCg_model');


description = SRDt_reduced_dynamics_and_transverse_linearization(...
    'H_callable', @Handler_dynamics_HCg_model.get_H, ...
    'C_callable', @Handler_dynamics_HCg_model.get_C, ...
    'g_callable', @Handler_dynamics_HCg_model.get_g, ...
    'T_callable', @Handler_dynamics_HCg_model.get_T, ...
    'Symbolic_ToOptimizeFunctions', true, ...
    'Casadi_cfile_name', 'reduced_dynamics', ...
    'FunctionName_alpha', 'get_alpha', ...
    'FunctionName_beta', 'get_beta', ...
    'FunctionName_gamma', 'get_gamma', ...
    'FunctionName_Uff', 'get_U_ff', ...
    'FunctionName_Nff', 'get_N', ...
    'FunctionName_A', 'get_A_transv', ...
    'FunctionName_B', 'get_B_transv', ...
    'N_dof', Handler_dynamics_generalized_coordinates_model.dof_configuration_space_robot, ...
    'c0', [1, 0], ...
    'H0', [0, 1], ...
    'Path', 'Transverse/');


Handler_reduced_dynamics_and_transverse_linearization = SRD_get_handler_reduced_dynamics_and_transverse_linearization('description', description);
SRD_save(Handler_reduced_dynamics_and_transverse_linearization, 'Handler_reduced_dynamics_and_transverse_linearization');



% h = SRD_get('Handler_reduced_dynamics_and_transverse_linearization');

return


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Linearization

% description = SRD_generate_dynamics_linearization(...
%     'SymbolicEngine',                         SymbolicEngine, ...
%     'H', H, ...
%     'c', (in + g + d), ...
%     'T', T, ...
%     'Symbolic_ToOptimizeFunctions',           true, ...
%     'Casadi_cfile_name',                      'g_dynamics_linearization', ...
%     'FunctionName_A',                         'g_linearization_A', ...
%     'FunctionName_B',                         'g_linearization_B', ...
%     'FunctionName_c',                         'g_linearization_c', ...
%     'Path',                                   'Linearization/');
% 
% Handler_dynamics_Linearized_Model = SRD_get_handler__dynamics_linearized_model('description', description);
% SRD_save(Handler_dynamics_Linearized_Model, 'Handler_dynamics_Linearized_Model');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constraints

%%%%%%%%%%%%
%construct constraint
constraint = SymbolicEngine.LinkArray(2).AbsoluteFollower(3);

constraintR = [SymbolicEngine.LinkArray(2).AbsoluteFollower(3); 
              SymbolicEngine.LinkArray(2).AbsoluteFollower(3)*2]; 
%%%%%%%%%

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                   constraintR, ...
    'Casadi_cfile_name',                     'g_Constraints', ...
    'Symbolic_ToSimplify',                    true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToOptimizeFunctions',           true, ...
    'FunctionName_Task',                     'g_Constraint', ...
    'FunctionName_TaskJacobian',             'g_Constraint_Jacobian', ...
    'FunctionName_TaskJacobian_derivative',  'g_Constraint_Jacobian_derivative', ...
    'Path',                                  'Constraints/');


Handler_Constraints_Model = SRD_get_handler__Constraints_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_Constraints_Model, 'Handler_Constraints_Model');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Inverse kinematics

%%%%%%%%%%%%
%construct inverse kinematics task
% rC = SymbolicEngine.GetCoM;
Task = [SymbolicEngine.q(1); SymbolicEngine.q(2); constraint]; 
%%%%%%%%%

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                      Task, ...
    'Casadi_cfile_name',                         'g_InverseKinematics', ...
    'Symbolic_ToSimplify',                       true, ...
    'Symbolic_UseParallelizedSimplification',    false, ...
    'Symbolic_ToOptimizeFunctions',              true, ...
    'FunctionName_Task',                         'g_InverseKinematics_Task', ...
    'FunctionName_TaskJacobian',                 'g_InverseKinematics_TaskJacobian', ...
    'FunctionName_TaskJacobian_derivative',      'g_InverseKinematics_TaskJacobian_derivative', ...
    'Path',                                      'InverseKinematics/');

Handler_IK_Model = SRD_get_handler__IK_model('description', description, ...
    'dof_robot', SymbolicEngine.dof);
SRD_save(Handler_IK_Model, 'Handler_IK_Model');



